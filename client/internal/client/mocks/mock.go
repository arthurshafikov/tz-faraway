// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnDialer is a mock of ConnDialer interface.
type MockConnDialer struct {
	ctrl     *gomock.Controller
	recorder *MockConnDialerMockRecorder
}

// MockConnDialerMockRecorder is the mock recorder for MockConnDialer.
type MockConnDialerMockRecorder struct {
	mock *MockConnDialer
}

// NewMockConnDialer creates a new mock instance.
func NewMockConnDialer(ctrl *gomock.Controller) *MockConnDialer {
	mock := &MockConnDialer{ctrl: ctrl}
	mock.recorder = &MockConnDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnDialer) EXPECT() *MockConnDialerMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockConnDialer) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockConnDialerMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockConnDialer)(nil).CloseConnection))
}

// Dial mocks base method.
func (m *MockConnDialer) Dial(network, addr string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", network, addr)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockConnDialerMockRecorder) Dial(network, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockConnDialer)(nil).Dial), network, addr)
}
